{"ast":null,"code":"import { createStore } from 'redux';\nconst initState = {\n  cart: 0,\n  categories: [{\n    name: 'Ollivanders',\n    displayName: 'Ollivanders'\n  }, {\n    name: 'Flourish and Blotts ',\n    displayName: 'Flourish and Blotts '\n  }, {\n    name: 'Quality Quidditch Supplies ',\n    displayName: 'Quality Quidditch Supplies '\n  }],\n  products: [{\n    name: 'Cypress Wand',\n    description: 'Quasi-sentient magical instrument through which a witch or wizard channels her or his magical powers',\n    stock: 10,\n    price: 10,\n    category: 'Ollivanders'\n  }, {\n    name: 'Peacock Feather',\n    description: 'Used in Dragon Tonic.',\n    stock: 10,\n    price: 1,\n    category: 'Ollivanders'\n  }, {\n    name: 'Snallygaster Heartstring Core',\n    description: 'Substance within a wand',\n    stock: 10,\n    price: 5,\n    category: 'Ollivanders'\n  }, {\n    name: 'The Invisible Book of Invisibility',\n    description: 'An essential read for anyone intrigued by invisibility',\n    stock: 10,\n    price: 20,\n    category: 'Flourish and Blotts'\n  }, {\n    name: 'Magical Me',\n    description: 'Do all the things',\n    stock: 10,\n    price: 1200,\n    category: 'Flourish and Blotts'\n  }, {\n    name: 'Magical Me',\n    description: 'Autobiography of Gilderoy Lockhart',\n    stock: 10,\n    price: 1200,\n    category: 'Flourish and Blotts'\n  }, {\n    name: 'Carrot',\n    description: 'Crunch all the things',\n    stock: 25,\n    price: 0.3,\n    category: 'food'\n  }, {\n    name: 'Cake',\n    description: 'Lie all the things',\n    stock: 10,\n    price: 5,\n    category: 'food'\n  }],\n  currentCategory: 'food'\n}; // reducer = function that takes in state (state=initState), action => by setting state to init, we're saying initial state should defalt to initState\n//action needs 2 things = type & payload\n// state = the current state (non-mutable)\n// action = an object containing type and payload\n\nconst reducer = (state = initState, action) => {\n  let newState = { ...state\n  };\n\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      break;\n\n    case 'CHANGE_CATEGORY':\n      newState.currentCategory = action.payload;\n      break;\n\n    default:\n      break;\n  }\n\n  return newState;\n};\n\nexport default createStore(reducer);","map":{"version":3,"sources":["/Users/sian/Desktop/Code_401/lab_29/storefront/src/store.js"],"names":["createStore","initState","cart","categories","name","displayName","products","description","stock","price","category","currentCategory","reducer","state","action","newState","type","payload"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,IAAI,EAAE,CADQ;AAEdC,EAAAA,UAAU,EAAE,CACR;AAAEC,IAAAA,IAAI,EAAE,aAAR;AAAuBC,IAAAA,WAAW,EAAE;AAApC,GADQ,EAER;AAAED,IAAAA,IAAI,EAAE,sBAAR;AAAgCC,IAAAA,WAAW,EAAE;AAA7C,GAFQ,EAGR;AAAED,IAAAA,IAAI,EAAE,6BAAR;AAAuCC,IAAAA,WAAW,EAAE;AAApD,GAHQ,CAFE;AAOdC,EAAAA,QAAQ,EAAE,CACN;AACIF,IAAAA,IAAI,EAAE,cADV;AAEIG,IAAAA,WAAW,EAAE,sGAFjB;AAGIC,IAAAA,KAAK,EAAE,EAHX;AAIIC,IAAAA,KAAK,EAAE,EAJX;AAKIC,IAAAA,QAAQ,EAAE;AALd,GADM,EAQN;AACIN,IAAAA,IAAI,EAAE,iBADV;AAEIG,IAAAA,WAAW,EAAE,uBAFjB;AAGIC,IAAAA,KAAK,EAAE,EAHX;AAIIC,IAAAA,KAAK,EAAE,CAJX;AAKIC,IAAAA,QAAQ,EAAE;AALd,GARM,EAeN;AACIN,IAAAA,IAAI,EAAE,+BADV;AAEIG,IAAAA,WAAW,EAAE,yBAFjB;AAGIC,IAAAA,KAAK,EAAE,EAHX;AAIIC,IAAAA,KAAK,EAAE,CAJX;AAKIC,IAAAA,QAAQ,EAAE;AALd,GAfM,EAuBN;AACIN,IAAAA,IAAI,EAAE,oCADV;AAEIG,IAAAA,WAAW,EAAE,wDAFjB;AAGIC,IAAAA,KAAK,EAAE,EAHX;AAIIC,IAAAA,KAAK,EAAE,EAJX;AAKIC,IAAAA,QAAQ,EAAE;AALd,GAvBM,EA8BN;AACIN,IAAAA,IAAI,EAAE,YADV;AAEIG,IAAAA,WAAW,EAAE,mBAFjB;AAGIC,IAAAA,KAAK,EAAE,EAHX;AAIIC,IAAAA,KAAK,EAAE,IAJX;AAKIC,IAAAA,QAAQ,EAAE;AALd,GA9BM,EAqCN;AACIN,IAAAA,IAAI,EAAE,YADV;AAEIG,IAAAA,WAAW,EAAE,oCAFjB;AAGIC,IAAAA,KAAK,EAAE,EAHX;AAIIC,IAAAA,KAAK,EAAE,IAJX;AAKIC,IAAAA,QAAQ,EAAE;AALd,GArCM,EAqDN;AACIN,IAAAA,IAAI,EAAE,QADV;AAEIG,IAAAA,WAAW,EAAE,uBAFjB;AAGIC,IAAAA,KAAK,EAAE,EAHX;AAIIC,IAAAA,KAAK,EAAE,GAJX;AAKIC,IAAAA,QAAQ,EAAE;AALd,GArDM,EA4DN;AACIN,IAAAA,IAAI,EAAE,MADV;AAEIG,IAAAA,WAAW,EAAE,oBAFjB;AAGIC,IAAAA,KAAK,EAAE,EAHX;AAIIC,IAAAA,KAAK,EAAE,CAJX;AAKIC,IAAAA,QAAQ,EAAE;AALd,GA5DM,CAPI;AA2EdC,EAAAA,eAAe,EAAE;AA3EH,CAAlB,C,CA8EI;AAEA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGZ,SAAT,EAAoBa,MAApB,KAA+B;AAC3C,MAAIC,QAAQ,GAAG,EAAE,GAAGF;AAAL,GAAf;;AACA,UAAQC,MAAM,CAACE,IAAf;AACI,SAAK,aAAL;AACI;;AACJ,SAAK,iBAAL;AACID,MAAAA,QAAQ,CAACJ,eAAT,GAA2BG,MAAM,CAACG,OAAlC;AACA;;AACJ;AACI;AAPR;;AAUA,SAAOF,QAAP;AACH,CAbD;;AAeA,eAAef,WAAW,CAACY,OAAD,CAA1B","sourcesContent":["import { createStore } from 'redux';\n\nconst initState = {\n    cart: 0,\n    categories: [\n        { name: 'Ollivanders', displayName: 'Ollivanders' },\n        { name: 'Flourish and Blotts ', displayName: 'Flourish and Blotts ' },\n        { name: 'Quality Quidditch Supplies ', displayName: 'Quality Quidditch Supplies ' }\n    ],\n    products: [\n        {\n            name: 'Cypress Wand',\n            description: 'Quasi-sentient magical instrument through which a witch or wizard channels her or his magical powers',\n            stock: 10,\n            price: 10,\n            category: 'Ollivanders',\n        },\n        {\n            name: 'Peacock Feather',\n            description: 'Used in Dragon Tonic.',\n            stock: 10,\n            price: 1,\n            category: 'Ollivanders',\n        },\n        {\n            name: 'Snallygaster Heartstring Core',\n            description: 'Substance within a wand',\n            stock: 10,\n            price: 5,\n            category: 'Ollivanders',\n        },\n\n        {\n            name: 'The Invisible Book of Invisibility',\n            description: 'An essential read for anyone intrigued by invisibility',\n            stock: 10,\n            price: 20,\n            category: 'Flourish and Blotts',\n        },\n        {\n            name: 'Magical Me',\n            description: 'Do all the things',\n            stock: 10,\n            price: 1200,\n            category: 'Flourish and Blotts',\n        },\n        {\n            name: 'Magical Me',\n            description: 'Autobiography of Gilderoy Lockhart',\n            stock: 10,\n            price: 1200,\n            category: 'Flourish and Blotts',\n        },\n\n\n\n\n\n\n\n\n   \n        {\n            name: 'Carrot',\n            description: 'Crunch all the things',\n            stock: 25,\n            price: 0.3,\n            category: 'food',\n        },\n        {\n            name: 'Cake',\n            description: 'Lie all the things',\n            stock: 10,\n            price: 5,\n            category: 'food',\n        },\n    ],\n    currentCategory: 'food',\n};\n\n    // reducer = function that takes in state (state=initState), action => by setting state to init, we're saying initial state should defalt to initState\n\n    //action needs 2 things = type & payload\n    // state = the current state (non-mutable)\n    // action = an object containing type and payload\n    const reducer = (state = initState, action) => {\n        let newState = { ...state };\n        switch (action.type) {\n            case 'ADD_TO_CART':\n                break;\n            case 'CHANGE_CATEGORY':\n                newState.currentCategory = action.payload;\n                break;\n            default:\n                break;\n        }\n    \n        return newState;\n    };\n    \n    export default createStore(reducer);"]},"metadata":{},"sourceType":"module"}